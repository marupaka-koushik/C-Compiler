#ifndef TreeNode_H
#define TreeNode_H

#include <bits/stdc++.h>
using namespace std;
struct backpatchNode;
enum NodeType
{
    NODE_ASSIGNMENT,
    NODE_TRANSLATION_UNIT,
    NODE_PARAMETER_TYPE_LIST,
    NODE_PARAMETER_LIST,
    NODE_PARAMETER_DECLARATION,
    NODE_IDENTIFIER_LIST,
    NODE_FUNCTION_DEFINITION,
    NODE_TYPE_NAME,
    NODE_ABSTRACT_DECLARATOR,
    NODE_DIRECT_ABSTRACT_DECLARATOR,
    NODE_TYPE_SPECIFIER,
    NODE_STORAGE_CLASS_SPECIFIER,
    NODE_STRUCT_OR_UNION_SPECIFIER,
    NODE_STRUCT_DECLARATION_LIST,
    NODE_STRUCT_DECLARATION,
    NODE_SPECIFIER_QUALIFIER_LIST,
    NODE_STRUCT_DECLARATOR_LIST,
    NODE_STRUCT_DECLARATOR,
    NODE_ENUM_SPECIFIER,
    NODE_ENUMERATOR_LIST,
    NODE_ENUMERATOR,
    NODE_DECLARATION_SPECIFIERS,
    NODE_DECLARATION,
    NODE_DIRECT_DECLARATOR,
    NODE_INITIALIZER,
    NODE_INITIALIZER_LIST,
    NODE_ID,
    NODE_CONSTANT,
    NODE_TYPE_QUALIFIER,
    NODE_DECLARATION_LIST,
    NODE_STATEMENT_LIST,
    NODE_STATEMENT,
    NODE_LABELED_STATEMENT,
    NODE_EXPRESSION_STATEMENT,
    NODE_SELECTION_STATEMENT,
    NODE_ITERATION_STATEMENT,
    NODE_JUMP_STATEMENT,
    NODE_EXPRESSION,
    NODE_ASSIGNMENT_EXPRESSION,
    NODE_CONDITIONAL_EXPRESSION,
    NODE_LOGICAL_OR_EXPRESSION,
    NODE_LOGICAL_AND_EXPRESSION,
    NODE_INCLUSIVE_OR_EXPRESSION,
    NODE_EXCLUSIVE_OR_EXPRESSION,
    NODE_AND_EXPRESSION,
    NODE_EQUALITY_EXPRESSION,
    NODE_RELATIONAL_EXPRESSION,
    NODE_SHIFT_EXPRESSION,
    NODE_ADDITIVE_EXPRESSION,
    NODE_MULTIPLICATIVE_EXPRESSION,
    NODE_CAST_EXPRESSION,
    NODE_UNARY_EXPRESSION,
    NODE_POSTFIX_EXPRESSION,
    NODE_PRIMARY_EXPRESSION,
    NODE_ARGUMENT_EXPRESSION_LIST,
    NODE_CONSTANT_EXPRESSION,
    NODE_ASSIGNMENT_OPERATOR,
    NODE_UNARY_OPERATOR,
    NODE_TYPE_NAME_SPECIFIER,
    NODE_POINTER,
    NODE_REFERENCE,
    NODE_TYPE_QUALIFIER_LIST,
    NODE_ELLIPSIS,
    NODE_COMPOUND_STATEMENT,
    NODE_DECLARATOR_LIST,
    NODE_DECLARATOR,
    NODE_IDENTIFIER,
    NODE_STRING_LITERAL,
    NODE_CHAR_LITERAL,
    NODE_KEYWORD,
    ARRAY,
    NODE_BOOLEAN_LITERAL,
    NODE_IO_STATEMENT,
    NODE_CLASS_SPECIFIER,         // For class definitions (named or anonymous)
    NODE_MEMBER_DECLARATION_LIST, // List of member declarations in a class
    NODE_MEMBER_DECLARATION,      // Individual member declaration (access specifier or declaration)
    NODE_ACCESS_SPECIFIER,
    INTEGER_LITERAL,
    FLOAT_LITERAL,
    NODE_DESTRUCTOR_FUNCTION,
    NODE_CONSTRUCTOR_FUNCTION,
    NODE_BLOCK_ITEM_LIST,
    NODE_SCOPE_RESOLUTION_STATEMENT,
    NODE_TYPE,
    NODE_SWITCH_STATEMENT,
    NODE_SWITCH_CASE_LIST,
    NODE_DEFAULT_CASE,
    NODE_NEXT_LIST,
    OTHERS
};

using NodeValue = variant<monostate, string, int, double, bool, char>;
